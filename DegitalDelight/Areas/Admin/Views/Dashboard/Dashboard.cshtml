@using DegitalDelight.Services.Interfaces
@{
    Layout = "../Shared/_LayoutAdmin.cshtml";
}
@inject IReportService reportService
@inject IOrderService orderService

<div class="container">
    <div class="row">
        <div class="col">
            <p class="text-white mt-5 mb-5">Welcome back, <b>Admin</b></p>
        </div>
    </div>
    <!-- row -->
    <div class="row tm-content-row">
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
            <div class="tm-bg-primary-dark tm-block">
                <h2 class="tm-block-title">Doanh thu loại sản phẩm</h2>
                <canvas id="barChart"></canvas>
            </div>
        </div>
        <div class="col-sm-12 col-md-12 col-lg-6 col-xl-6 tm-block-col">
            <div class="tm-bg-primary-dark tm-block tm-block-taller">
                <h2 class="tm-block-title">Thông tin sản phẩm hiện có trong cửa hàng</h2>
                <div id="pieChartContainer">
                    <canvas id="pieChart" class="chartjs-render-monitor" width="200" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-12 tm-block-col">
            <div class="tm-bg-primary-dark tm-block tm-block-taller tm-block-scroll">
                <h2 class="tm-block-title">Đơn bán hàng</h2>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">Số đơn</th>
                            <th scope="col">Tình trạng</th>
                            <th scope="col">Khách hàng</th>
                            <th scope="col">Ngày bắt đầu</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in await orderService.GetAllOrders())
                        {
                            <tr>
                                <th scope="row"><b>#@item.Id</b></th>
                                <td>
                                    <div class="tm-status-circle moving">
                                    </div>@item.State
                                </td>
                                <td>@item.User.Email</td>
                                <td>@item.Date</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/chart.min.js"></script>
    <script src="~/js/jquery-3.3.1.min.js"></script>
    <script src="~/js/moment.min.js"></script>

    <script>
        Chart.defaults.global.defaultFontColor = 'white';
        let ctxLine, ctxBar, ctxPie, optionsLine, optionsBar, optionsPie, configLine, configBar, configPie, lineChart, barChart, pieChart;

        // DOM is ready
        $(function () {
            drawLineChart(); // Line Chart
            drawBarChart(); // Bar Chart
            drawPieChart(); // Pie Chart

            $(window).resize(function () {
                updateLineChart();
                updateBarChart();
            });

            var sampleData = [];
            $.ajax({
                type: "GET",
                url: "/Admin/Dashboard/GetInventoryReport",
                dataType: "json",
                async: true,
                success: function (data) {
                    sampleData = data;
                    updatePieChart(sampleData);
                },
                failure: function (err) {
                }
            })

            // Function to update the pie chart with data
            function updatePieChart(data) {
                // Access the Chart.js instance
                if (pieChart) {
                    pieChart.destroy();
                }
                pieChart = new Chart(document.getElementById('pieChart').getContext('2d'), {
                    type: 'pie',
                    data: {
                        labels: data.map(item => item.item1),
                        datasets: [{
                            data: data.map(item => item.item2),
                            backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#8B4513', '#00FF7F'], // Add more colors as needed
                        }],
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                    }
                });
            }

            var sampleBarData = {
                labels: ["Laptop", "Điện thoại", "Thiết bị mạng", "Phụ kiện gaming", "Phụ kiện"],
                datasets: [{
                    label: 'Doanh thu',
                    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56', '#8B4513', '#00FF7F'], // Add more colors as needed
                    borderColor: '#fff',
                    data: [3000, 2000, 2500, 1500, 1000] // Sample revenue data
                }]
            };

            // Function to draw the initial bar chart
            function drawBarChart() {
                if (barChart) {
                    barChart.destroy();
                }
                ctxBar = document.getElementById('barChart').getContext('2d');
                optionsBar = {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        xAxes: [{
                            gridLines: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                        }],
                        yAxes: [{
                            gridLines: {
                                color: 'rgba(255, 255, 255, 0.1)',
                            },
                            ticks: {
                                beginAtZero: true,
                                stepSize: 1000,
                                callback: function (value) {
                                    return value + ' VND';
                                }
                            }
                        }]
                    },
                    legend: {
                        labels: {
                            fontColor: 'white'
                        }
                    }
                };
                configBar = {
                    type: 'bar',
                    data: sampleBarData,
                    options: optionsBar
                };
                barChart = new Chart(ctxBar, configBar);
            }

            // Function to update the bar chart with data
            function updateBarChart(data) {
                // Access the Chart.js instance
                if (barChart) {
                    barChart.destroy();
                }
                barChart = new Chart(ctxBar, {
                    type: 'bar',
                    data: data,
                    options: optionsBar
                });
            }

            updateBarChart(sampleBarData);
            // Update the pie chart with sample data
            updatePieChart(sampleData);
        });
    </script>

}

